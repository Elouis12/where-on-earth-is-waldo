ADDING 30 MINUTE INTERVAL FOR PASSWORD RESET REQUES

    1. add 2 entries to db for users
        * time requested
        * time for new request

        ex. if user requested a password reset at
            10 : 38


            TIME REQUESTED COLUMN

            get hours - 10
            get minutes - 48

            convert all to seconds

            hour 10 - 36000
            minute 30 - 1800

            add them

            total seconds 37800


            TIME FOR NEW REQUEST

            add 30 minutes or 1800 seconds

            so

            at  hour 11 we can make another request OR

            at 37800 + 1800 = 39600 seconds we can



           WHEN CHECKING DB

           TIME FOR NEW REQUEST - TIME REQUESTED

           if 39600 (11) - 37800 (10:30) >= 1800

           then let them



           OR CHECK IF TOKEN EXPIRED?

           IN DB REQUEST TOKEN set time for 30 minutes

           when clicking the rest button check db to see if it has expired
           this eliminated the issue if say the user made a reset password at 11:40 (42000) and time for new is 12:10 (43800)

           this causes problems in military and regular time

           if military time - when user makes request at hour 23 and 30 minutes later it is a new day at hour 0
           if regular time - when user makes request at hour 12 and 30 minutes later it is at hour 1

           both ways we have to make checks to see, so tokens would be better




ADDING MULTIPLAYER

    FUNCTIONAL REQUIREMENTS

        * user needs to be able to send unique link to up to x amount of people
        * the link should be able to use a special token to see if valid link with the game options as the creator of the session
        * have the sender be the only one to start the session
        * minimum of 2 people are needed to start a session
        * invalidate the link after x minutes of no new joiners
        * on each connected user's screens, they should see everyone's progress
        * there should be a timer
        * have separate section in stats page to track multiplayer game's played
        * creator is able to close the session
        * if someone besides the creator ends the session, (as long as there's 2 people, creator and someone else ) the session continues
        * if someone ends a session and the creator is left, the game resets the time of inactivity (from no one joining) before invalidating the link
        * once someone is done and exits, it will save their stats
        * show how many people are currently joined
        * if the user is not logged in, they must give a name
        * if the user is logged in, use their username
        * users can create a session
        * users can join a session


    NON FUNCTIONAL REQUIREMENTS

        * session id should be x characters long with a combination of numbers and letters
        * when creator makes a session, store each unique session id's into a db with all the other information, creator, etc
        * when a session is completely over, delete it from the db ( if 1 million people create sessions of 2 characters, there's a possibility we'll run out of combinations )
        * when a user connects to a session, make API call to the db for that row and take the user to the play page with the info inserted
        * when a user joins, update the column for the joined, that way it can validate if users are full

CRC CARDS

    CLASS


        Server
                [] responsibility
                    * listen to client requests
                    * establish connection when endpoint is connected

                [] collaboration
                    * ClientHandler

                [] attributes

                    * players[]
                    * playerCount

                [] methods

                    isFull() - checks if session is full


        ClientHandler -

                [] responsibility
                    * handle the connection of each

                [] collaboration
                    * Server

                [] attributes

                    * player

                [] methods

                    *


// TO DO

* remove checking for full room after testing and ready to finalize everything
in applicationcontrollers.js and in serversocket.js


* update scores, since the updating occurs when user clicks correct dot
update the user's score there (globe.js in the intersect functions),
then, maybe create a socket that goes to the server and say (update-score)
it passess all of the users and their scores, sends it to the server, sorts them, and broadcasts to all sockets that are for the players and updates the order


* there's an issue where each element has id="player-score"
the issue is, it gets the first player score so if we have

player 1 : 1 / 10
player 2 : 0 / 10

and player 2 got 1 right, it will only update player 2s


* check if logged out user did not put same name as logged in user



**** MAKE SURE LOGGED OUT USER DOES NOT PICK ANY USERNAMES IN THE DATA BASE CURRENTLY FOR REGISTERED USERS

*** RETURN ACTUAL COUNT OF CURRENT USERS AND MAX USERS WHEN A USER EXITS

* possible issue on why number of clients does not update correctly

    client 1 : establish a connection but takes too long to load and send 0 + 1 = 1 connected
    client 2 : established, since client 2 did not connect yet, it sends 1 but once client 1 finishes it reupdates it to 1?
    probably not